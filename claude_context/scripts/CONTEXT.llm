@component: claude_context.scripts
@type: script_collection
@version: 2.0.0
@deps: [claude_context]
@purpose: Core context generation and project management scripts

\n\n@interface:\n- class ProcedureValidator\n  - log_step()\n  - check_procedure_compliance()\n  - validate_control_points()\n  - check_last_change()\n  - generate_report()\n- venv_check()\n- log_action()\n- get_python_info()\n- should_exclude()\n- find_modules()\n- analyze_dependencies()\n- create_project_llm()\n- create_format_md()\n- analyze_python_file()\n- generate_context_llm()\n- create_missing_contexts()\n- update_existing_contexts()\n- apply_claude_rules()\n- create_baseline_test_for_module()\n- create_missing_baseline_tests()\n- analyze_project_state()\n- validate_project_health()\n- main()\n- venv_check()\n- main()\n- venv_check()\n- find_unused_imports()\n- find_unused_functions()\n- scan_project()\n- interactive_cleanup()\n- main()\n- venv_check()\n- analyze_python_file()\n- generate_context_llm()\n- init_contexts()\n- update_contexts()\n- scan_missing()\n- main()\n- venv_check()\n- main()\n- venv_check()\n- main()\n@behavior:
- Enforces 9-step development procedure across all changes
- Automatically generates CONTEXT.llm for all Python modules
- Creates baseline tests before any code modifications
- Validates project health and dependency integrity
- Scans for unused code and suggests cleanup
- Maintains PROJECT.llm with current architecture state
- Tracks procedure compliance and generates reports

@errors:
- ProcedureViolationError: Required steps skipped in development
- BaselineTestFailure: Tests fail after code changes
- ContextGenerationError: Unable to analyze module interface
- ValidationError: Project health checks failed

@performance:
- Context generation: <3 seconds per module
- Baseline test creation: <2 seconds per module
- Project validation: <8 seconds full scan
- Procedure compliance check: <1 second
